import random
import os
#clase y jugador 
class Jugador:
    def __init__(self, nombres, identificacion, edad, usuario, password, rol="jugador"):
        self.nombres = nombres
        self.identificacion = identificacion
        self.edad = edad
        self.usuario = usuario
        self.password = password
        self.rol = rol

    def __str__(self):
        return f"Usuario: {self.usuario} | Nombre: {self.nombres} | Rol: {self.rol}"

    def a_cadena(self):
        """Convierte el objeto Jugador a una cadena para guardar en .txt"""
        return f"{self.nombres},{self.identificacion},{self.edad},{self.usuario},{self.password},{self.rol}\n"
    #co el @classmethod
    def desde_cadena(cls, cadena):
        """Crea un objeto Jugador desde una cadena de .txt"""
        partes = cadena.strip().split(',')
        if len(partes) == 6:
            nombres, identificacion, edad, usuario, password, rol = partes
            jugador = cls(nombres, identificacion, int(edad), usuario, password, rol)
            return jugador
        elif len(partes) == 8: # Para compatibilidad con archivos viejos
            nombres, identificacion, edad, usuario, password, rol, _, _ = partes
            jugador = cls(nombres, identificacion, int(edad), usuario, password, rol)
            return jugador
        return None
#nodos de arbol de habilidades
class NodoHabilidad:
    def __init__(self, nombre_habilidad, tipo_habilidad="generico", valor=0):
        self.nombre = nombre_habilidad
        self.tipo = tipo_habilidad
        self.valor = valor
        self.izquierda = None
 elif opcion == '2': # Listar Alfabético (Inorden)
            habilidades_planas = ninja.habilidades.obtener_habilidades_planas()
            if habilidades_planas:
                print("\n--- Habilidades (orden alfabético) ---")
                for h_nombre, h_tipo, h_valor in sorted(habilidades_planas, key=lambda x: x[0].lower()):
                    print(f"- {h_nombre} (Tipo: {h_tipo}, Poder: {h_valor})")
            else:
                print("¡Este ninja no tiene habilidades registradas todavía!")
            pausar_consola()

        elif opcion == '3': # Listar Por Valor/Daño
            habilidades_por_valor = ninja.habilidades.obtener_habilidades_por_valor()
            if habilidades_por_valor:
                print("\n--- Habilidades (ordenadas por poder - de mayor a menor) ---")
                for h_nombre, h_tipo, h_valor in habilidades_por_valor:
                    print(f"- {h_nombre} (Tipo: {h_tipo}, Poder: {h_valor})")
            else:
                print("¡Este ninja no tiene habilidades registradas todavía!")
            pausar_consola()

        elif opcion == '4': # Buscar Habilidad
            nombre_buscar = input("Ingresa el nombre de la habilidad que quieres buscar: ").strip()
            habilidad_encontrada = ninja.habilidades.buscar_habilidad(nombre_buscar)
            if habilidad_encontrada:
                print(f"¡Habilidad encontrada!: {habilidad_encontrada.nombre} (Tipo: {habilidad_encontrada.tipo}, Poder: {habilidad_encontrada.valor})")
            else:
                print(f"La habilidad '{nombre_buscar}' no fue encontrada para {ninja.nombre}.")
            pausar_consola()

        elif opcion == '5': # Eliminar Habilidad
            nombre_eliminar = input("Ingresa el nombre de la habilidad que quieres que olvide: ").strip()
            if ninja.habilidades.eliminar_habilidad(nombre_eliminar):
                print(f"¡Habilidad '{nombre_eliminar}' eliminada de {ninja.nombre} con éxito!")
                print("¡No olvides guardar los cambios en ninjas.txt desde el menú principal del administrador!")
            else:
                print(f"La habilidad '{nombre_eliminar}' no fue encontrada o no pudo ser eliminada de {ninja.nombre}.")
            pausar_consola()

        elif opcion == '6':
            print(f"Volviendo al menú del administrador.")
            pausar_consola()
            break
        else:
            print("Opción no válida. Por favor, elige un número de la lista.")
            pausar_consola()
        self.derecha = None

     def __str__(self):
        return f"Habilidad: {self.nombre} ({self.tipo}, Valor: {self.valor})"
        
class ArbolBinarioHabilidades:
    def __init__(self):
        self.raiz = None

    def insertar_habilidad(self, nombre, tipo, valor):
        """Inserta una nueva habilidad en el árbol (implementación simple de BST por nombre)."""
        nuevo_nodo = NodoHabilidad(nombre, tipo, valor)
        if self.raiz is None:
            self.raiz = nuevo_nodo
        else:
            self._insertar_recursivo(self.raiz, nuevo_nodo)

    def _insertar_recursivo(self, nodo_actual, nuevo_nodo):
        if nuevo_nodo.nombre.lower() == nodo_actual.nombre.lower():
            return
        elif nuevo_nodo.nombre.lower() < nodo_actual.nombre.lower():
            if nodo_actual.izquierda is None:
                nodo_actual.izquierda = nuevo_nodo
            else:
                self._insertar_recursivo(nodo_actual.izquierda, nuevo_nodo)
        else:
            if nodo_actual.derecha is None:
                nodo_actual.derecha = nuevo_nodo
            else:
                self._insertar_recursivo(nodo_actual.derecha, nuevo_nodo)
def recorrido_inorden(self):
        """Devuelve una lista de nombres de habilidades en recorrido inorden (Izquierda, Raíz, Derecha)."""
        habilidades = []
        self._inorden_recursivo(self.raiz, habilidades)
        return habilidades

    def _inorden_recursivo(self, nodo, habilidades):
        if nodo:
            self._inorden_recursivo(nodo.izquierda, habilidades)
            habilidades.append(nodo.nombre)
            self._inorden_recursivo(nodo.derecha, habilidades)

    def obtener_habilidades_planas(self):
        """Devuelve todas las habilidades del árbol como una lista de tuplas (nombre, tipo, valor)."""
        habilidades_planas = []
        self._inorden_habilidades_con_tipo_recursivo(self.raiz, habilidades_planas)
        return habilidades_planas

    def _inorden_habilidades_con_tipo_recursivo(self, nodo, habilidades_planas):
        if nodo:
            self._inorden_habilidades_con_tipo_recursivo(nodo.izquierda, habilidades_planas)
            habilidades_planas.append((nodo.nombre, nodo.tipo, nodo.valor))
            self._inorden_habilidades_con_tipo_recursivo(nodo.derecha, habilidades_planas)

    def obtener_habilidades_por_valor(self):
        """Devuelve todas las habilidades del árbol como una lista de tuplas (nombre, tipo, valor), ordenadas por valor descendente."""
        habilidades_planas = self.obtener_habilidades_planas()
        return sorted(habilidades_planas, key=lambda x: x[2], reverse=True)

    @classmethod
    def desde_habilidades_planas(cls, lista_habilidades_info):
        """Crea un nuevo árbol e inserta habilidades desde una lista de (nombre, tipo, valor)."""
        nuevo_arbol = cls()
        for item in lista_habilidades_info:
            if len(item) == 3:
                nombre, tipo, valor = item
                nuevo_arbol.insertar_habilidad(nombre, tipo, int(valor))
        return nuevo_arbol

    def buscar_habilidad(self, nombre):
        """Busca una habilidad por nombre en el árbol. Retorna el NodoHabilidad si lo encuentra, None en caso contrario."""
        return self._buscar_recursivo(self.raiz, nombre)

    def _buscar_recursivo(self, nodo, nombre_buscar):
        if nodo is None or nodo.nombre.lower() == nombre_buscar.lower():
            return nodo
        if nombre_buscar.lower() < nodo.nombre.lower():
            return self._buscar_recursivo(nodo.izquierda, nombre_buscar)
        else:
            return self._buscar_recursivo(nodo.derecha, nombre_buscar)
    def eliminar_habilidad(self, nombre):
        """Elimina una habilidad por su nombre del árbol. Retorna True si se eliminó, False en caso contrario."""
        if not self.buscar_habilidad(nombre):
            return False
        self.raiz = self._eliminar_recursivo(self.raiz, nombre)
        return True

    def _eliminar_recursivo(self, nodo_actual, nombre_a_eliminar):
        if nodo_actual is None:
            return nodo_actual

        if nombre_a_eliminar.lower() < nodo_actual.nombre.lower():
            nodo_actual.izquierda = self._eliminar_recursivo(nodo_actual.izquierda, nombre_a_eliminar)
        elif nombre_a_eliminar.lower() > nodo_actual.nombre.lower():
            nodo_actual.derecha = self._eliminar_recursivo(nodo_actual.derecha, nombre_a_eliminar)
        else: # Nodo encontrado
            if nodo_actual.izquierda is None:
                return nodo_actual.derecha
            elif nodo_actual.derecha is None:
                return nodo_actual.izquierda

            temp = self._encontrar_min_valor_nodo(nodo_actual.derecha)
            nodo_actual.nombre = temp.nombre
            nodo_actual.tipo = temp.tipo
            nodo_actual.valor = temp.valor
            nodo_actual.derecha = self._eliminar_recursivo(nodo_actual.derecha, temp.nombre)
        return nodo_actual

    def _encontrar_min_valor_nodo(self, nodo):
        actual = nodo
        while actual.izquierda is not None:
            actual = actual.izquierda
        return actual
#se usara esta clase pra ninjas
class Ninja:
    def __init__(self, nombre, fuerza, agilidad, resistencia, estilo):
        self.nombre = nombre
        self.fuerza = fuerza
        self.agilidad = agilidad
        self.resistencia = resistencia
        self.estilo = estilo
        self.puntos_victoria = 0.0
        self.habilidades = ArbolBinarioHabilidades()
        self.vida_actual = 500 # ¡VIDA VUELVE A 500 HP!

    def __str__(self):
        return f"Ninja: {self.nombre} | Fuerza: {self.fuerza} | Agilidad: {self.agilidad} | Resistencia: {self.resistencia} | Estilo: {self.estilo} | PV: {self.puntos_victoria:.1f}"

    def a_cadena(self):
        """Convierte el objeto Ninja a una cadena para guardar en .txt, incluyendo habilidades."""
        habilidades_planas = self.habilidades.obtener_habilidades_planas()
        habilidades_str = ";".join([f"{n}|{t}|{v}" for n, t, v in habilidades_planas])
        return (f"{self.nombre},{self.fuerza},{self.agilidad},{self.resistencia},"
                f"{self.estilo},{self.puntos_victoria},{habilidades_str}\n")
    @classmethod
    def desde_cadena(cls, cadena):
        """Crea un objeto Ninja desde una cadena de .txt, reconstruyendo el árbol de habilidades."""
        partes = cadena.strip().split(',')
        if len(partes) == 7:
            nombre, fuerza, agilidad, resistencia, estilo, puntos_victoria_str, habilidades_str = partes
            ninja = cls(nombre, int(fuerza), int(agilidad), int(resistencia), estilo)
            ninja.puntos_victoria = float(puntos_victoria_str)

            if habilidades_str:
                habilidades_cargadas = []
                for habilidad_info in habilidades_str.split(';'):
                    if habilidad_info:
                        h_partes = habilidad_info.split('|')
                        if len(h_partes) == 3:
                            habilidades_cargadas.append((h_partes[0], h_partes[1], int(h_partes[2])))
                ninja.habilidades = ArbolBinarioHabilidades.desde_habilidades_planas(habilidades_cargadas)
            return ninja
        return None
# GESTIÓN DE ARCHIVOS
ARCHIVO_USUARIOS = "usuarios.txt"
ARCHIVO_NINJAS = "ninjas.txt"
ARCHIVO_COMBATES_GLOBAL = "combates_global.txt" # Para historial global de combates

def cargar_usuarios():
    """Carga los usuarios registrados desde usuarios.txt."""
    usuarios = []
    try:
        with open(ARCHIVO_USUARIOS, 'r') as f:
            for linea in f:
                usuario = Jugador.desde_cadena(linea)
                if usuario:
                    usuarios.append(usuario)
    except FileNotFoundError:
        pass # No mostrar advertencia si no existe al inicio
    except Exception as e:
        print(f"Error al cargar usuarios: {e}")
    return usuarios

def guardar_usuarios(usuarios):
    """Guarda la lista de usuarios en usuarios.txt."""
    try:
        with open(ARCHIVO_USUARIOS, 'w') as f:
            for usuario in usuarios:
                f.write(usuario.a_cadena())
    except Exception as e:
        print(f"Error al guardar usuarios: {e}")

def cargar_ninjas():
    """Carga los ninjas desde ninjas.txt."""
    ninjas = []
    try:
        with open(ARCHIVO_NINJAS, 'r') as f:
            for linea in f:
                ninja = Ninja.desde_cadena(linea)
                if ninja:
                    ninjas.append(ninja)
    except FileNotFoundError:
        pass # No mostrar advertencia si no existe al inicio
    except Exception as e:
        print(f"Error al cargar ninjas: {e}")
    return ninjas

def guardar_ninjas(ninjas):
    """Guarda la lista de ninjas en ninjas.txt."""
    try:
        with open(ARCHIVO_NINJAS, 'w') as f:
            for ninja in ninjas:
                f.write(ninja.a_cadena())
    except Exception as e:
        print(f"Error al guardar ninjas: {e}")

def registrar_combate_global(log_combate):
    """Registra un combate en el historial global combates_global.txt."""
    try:
        with open(ARCHIVO_COMBATES_GLOBAL, 'a') as f:
            f.write(f"{log_combate}\n\n")
    except Exception as e:
        print(f"Error al registrar combate global: {e}")

def cargar_historial_global_combates():
    """Carga el historial global de combates desde combates_global.txt."""
    historial = []
    try:
        with open(ARCHIVO_COMBATES_GLOBAL, 'r') as f:
            contenido = f.read()
            combates = [c.strip() for c in contenido.split('\n\n') if c.strip()]
            historial.extend(combates)
    except FileNotFoundError:
        pass
    except Exception as e:
        print(f"Error al cargar historial de combates global: {e}")
    return historial

# listas
global_usuarios = []
global_ninjas = []
usuario_actual = None
ninja_seleccionado_jugador = None # ninja del jugador

#esta funcion es para que se limpie la consola
def limpiar_pantalla():
    """Limpia la consola."""
    os.system('cls' if os.name == 'nt' else 'clear')

def pausar_consola():
    """Pausa la ejecución de la consola hasta que el usuario presione Enter."""
    input("Presiona Enter para continuar...")

def buscar_ninja_por_nombre(nombre_buscar):
    """Busca un ninja en global_ninjas por su nombre (insensible a mayúsculas/minúsculas)."""
    for ninja in global_ninjas:
        if ninja.nombre.lower() == nombre_buscar.lower():
            return ninja
    return None

def registrar_nuevo_jugador():
    """Permite a un nuevo usuario registrarse en el sistema."""
    limpiar_pantalla()
    print("\n--- ¡Únete a la aventura ninja! REGISTRO ---")
    nombres = input("Ingresa tus nombres y apellidos: ").strip()
    identificacion = input("Ingresa tu número de identificación: ").strip()
     while True:
            try:
                edad = int(input("Ingresa tu edad: ").strip())
                break
            except ValueError:
                print("¡Ups! Edad inválida. Por favor, ingresa un número.")
    
        while True:
            usuario_email = input("Ingresa tu correo electrónico (será tu usuario, ej. nombre.apellido@gmail.com): ").strip().lower()
            if "@" not in usuario_email or "." not in usuario_email:
                print("Formato de correo inválido. Asegúrate de incluir '@' y '.'")
            elif any(u.usuario == usuario_email for u in global_usuarios):
                print("Este correo ya está registrado. Intenta con otro o inicia sesión.")
            else:
                break
    while True:
            password = input("Ingresa una contraseña (mín. 8 caracteres, 1 mayúscula, 1 número): ").strip()
            if len(password) < 8:
                print("La contraseña debe tener al menos 8 caracteres.")
            elif not any(char.isupper() for char in password):
                print("La contraseña debe contener al menos una letra mayúscula.")
            elif not any(char.isdigit() for char in password):
                print("La contraseña debe contener al menos un número.")
            else:
                break
    
        nuevo_jugador = Jugador(nombres, identificacion, edad, usuario_email, password, "jugador")
        global_usuarios.append(nuevo_jugador)
        guardar_usuarios(global_usuarios)
        print("¡Registro exitoso! ¡Bienvenido a PoliNinjaGames! Ya puedes iniciar sesión.")
        pausar_consola()
        return True
def iniciar_sesion():
    """Permite a un usuario iniciar sesión y devuelve el objeto Jugador autenticado o None."""
    limpiar_pantalla()
    print("\n--- ¡Hora de la acción! INICIO DE SESIÓN ---")
    usuario_input = input("Tu usuario (correo electrónico): ").strip().lower()
    password_input = input("Tu contraseña secreta: ").strip()

    for user in global_usuarios:
        if user.usuario == usuario_input and user.password == password_input:
            print(f"¡Bienvenido de nuevo, {user.nombres}! Prepárate para la batalla.")
            pausar_consola()
            return user

    print("Usuario o contraseña incorrectos. ¡Revisa bien e intenta de nuevo!")
    pausar_consola()
    return None

# FUNCIONES PARA MENÚ DE ADMINISTRADOR

def solicitar_datos_ninja(modo_edicion=False, ninja_existente=None):
    """Solicita los datos para crear o editar un ninja."""
    print("\n--- ¡Creando o ajustando un poderoso Ninja! ---")

    nombre_ninja = input(f"Nombre del Ninja (actual: {ninja_existente.nombre}, deja en blanco para mantener si editas): ").strip() if modo_edicion and ninja_existente else input("Nombre del Ninja: ").strip()

    if not nombre_ninja and not modo_edicion:
        print("El nombre no puede estar vacío. ¡Operación cancelada!")
        return None
    elif not nombre_ninja and modo_edicion:
        nombre_ninja = ninja_existente.nombre

    if not modo_edicion:
        if any(n.nombre.lower() == nombre_ninja.lower() for n in global_ninjas):
            print("¡Uy! Ya existe un ninja con ese nombre. Por favor, elige otro. Operación cancelada.")
            return None
    elif modo_edicion and ninja_existente.nombre.lower() != nombre_ninja.lower():
        if any(n.nombre.lower() == nombre_ninja.lower() and n is not ninja_existente for n in global_ninjas):
            print("¡Error! El nuevo nombre ya está ocupado por otro ninja. Por favor, elige otro. Operación cancelada.")
            return None

    def leer_atributo(nombre_atributo, valor_actual=None):
        while True:
            valor_current = valor_actual if valor_actual is not None else "N/A"
            prompt = f"Ingresa {nombre_atributo} (valor del 1 al 100, actual: {valor_current}): " if valor_actual is not None else f"Ingresa {nombre_atributo} (valor del 1 al 100): "
            valor_str = input(prompt).strip()
            if modo_edicion and valor_str == "":
                return valor_actual
            try:
                valor = int(valor_str)
                if 1 <= valor <= 100:
                    return valor
                else:
                    print("¡Cuidado! El valor debe estar entre 1 y 100.")
            except ValueError:
                print("¡Error! Ingresa un número válido, por favor.")
    fuerza = leer_atributo("Fuerza", ninja_existente.fuerza if modo_edicion and ninja_existente else None)
    agilidad = leer_atributo("Agilidad", ninja_existente.agilidad if modo_edicion and ninja_existente else None)
    resistencia = leer_atributo("Resistencia", ninja_existente.resistencia if modo_edicion and ninja_existente else None)

    estilos_validos = ["Taijutsu", "Ninjutsu", "Genjutsu", "Mixto"]
    estilo = ""
    while estilo not in estilos_validos:
        prompt_estilo = f"Estilo ({', '.join(estilos_validos)}) (actual: {ninja_existente.estilo if modo_edicion and ninja_existente else 'Ninguno'}): "
        estilo_input = input(prompt_estilo).strip().capitalize()

        if modo_edicion and estilo_input == "":
            estilo = ninja_existente.estilo
            break

        if estilo_input in estilos_validos:
            estilo = estilo_input
            break
        else:
            print(f"Estilo inválido. Por favor, elige uno de: {', '.join(estilos_validos)}")

    return (nombre_ninja, fuerza, agilidad, resistencia, estilo)

def agregar_nuevo_ninja():
    """Agrega un nuevo ninja a la lista global."""
    limpiar_pantalla()
    print("\n--- ¡Forjando un nuevo guerrero ninja! ---")
    datos_ninja = solicitar_datos_ninja(modo_edicion=False)
    if datos_ninja:
        nombre, fuerza, agilidad, resistencia, estilo = datos_ninja
        nuevo_ninja = Ninja(nombre, fuerza, agilidad, resistencia, estilo)
        global_ninjas.append(nuevo_ninja)
        print(f"¡Ninja '{nombre}' ha sido reclutado exitosamente! Recuerda guardar los cambios.")
    else:
        print("Operación de agregar ninja cancelada o fallida. ¡Intenta de nuevo!")
    pausar_consola()

def listar_ninjas():
    """Muestra todos los ninjas existentes."""
    print("\n--- Nuestros valientes Ninjas: ---")
    if not global_ninjas:
        print("¡Todavía no hay ninjas registrados en la aldea!")
        return

    ninjas_ordenados = sorted(global_ninjas, key=lambda ninja: ninja.nombre.lower())

    for i, ninja in enumerate(ninjas_ordenados):
        print(f"{i+1}. Nombre: {ninja.nombre}")
        print(f"   Fuerza: {ninja.fuerza}, Agilidad: {ninja.agilidad}, Resistencia: {ninja.resistencia}")
        print(f"   Estilo: {ninja.estilo}, Puntos de Victoria (PV): {ninja.puntos_victoria:.1f}")

        habilidades_nombres = ninja.habilidades.recorrido_inorden()
        if habilidades_nombres:
            print(f"   Habilidades: {', '.join(habilidades_nombres)}")
        else:
            print("   Habilidades: Ninguna aún...")
        print("-" * 30)
def consultar_ninja():
    """Permite al administrador consultar los detalles de un ninja específico."""
    limpiar_pantalla()
    print("\n--- Espiando los detalles de un Ninja... ---")
    if not global_ninjas:
        print("No hay ninjas registrados para investigar.")
        pausar_consola()
        return
    nombre_buscar = input("Ingresa el nombre del ninja que quieres consultar: ").strip()
    ninja_encontrado = buscar_ninja_por_nombre(nombre_buscar)

    if ninja_encontrado:
        print("\n--- Informe detallado del Ninja ---")
        print(f"Nombre: {ninja_encontrado.nombre}")
        print(f"Fuerza: {ninja_encontrado.fuerza}")
        print(f"Agilidad: {ninja_encontrado.agilidad}")
        print(f"Resistencia: {ninja_encontrado.resistencia}")
        print(f"Estilo: {ninja_encontrado.estilo}")
        print(f"Puntos de Victoria (PV): {ninja_encontrado.puntos_victoria:.1f}")
        habilidades_encontradas = ninja_encontrado.habilidades.obtener_habilidades_planas()
        if habilidades_encontradas:
            print("\nHabilidades (por nombre):")
            for nombre_h, tipo_h, valor_h in sorted(habilidades_encontradas, key=lambda x: x[0].lower()):
                print(f"- {nombre_h} (Tipo: {tipo_h}, Poder: {valor_h})")

            habilidades_por_valor = ninja_encontrado.habilidades.obtener_habilidades_por_valor()
            if habilidades_por_valor:
                print("\nHabilidades (por valor de poder):")
                for nombre_h, tipo_h, valor_h in habilidades_por_valor:
                    print(f"   - {nombre_h} (Tipo: {tipo_h}, Poder: {valor_h})")
        else:
            print("Habilidades: ¡Este ninja necesita aprender más jutsus!")
        print("-" * 30)
    else:
        print(f"Ninja '{nombre_buscar}' no encontrado. ¡Parece que no existe en esta aldea!")
    pausar_consola()
def actualizar_ninja():
    """Permite al administrador actualizar los atributos de un ninja existente."""
    limpiar_pantalla()
    print("\n--- ¡Mejorando un Ninja! ---")
    if not global_ninjas:
        print("No hay ninjas registrados para actualizar sus habilidades.")
        pausar_consola()
        return

    nombre_buscar = input("Ingresa el nombre del ninja que quieres actualizar: ").strip()
    ninja_a_actualizar = buscar_ninja_por_nombre(nombre_buscar)
    if ninja_a_actualizar:
        print(f"Ninja '{ninja_a_actualizar.nombre}' encontrado. ¡Vamos a mejorarlo!")
        print("Ingresa los nuevos datos (deja en blanco para mantener el actual):")

        nuevos_datos = solicitar_datos_ninja(modo_edicion=True, ninja_existente=ninja_a_actualizar)

        if nuevos_datos:
            nombre_nuevo, fuerza_nueva, agilidad_nueva, resistencia_nueva, estilo_nuevo = nuevos_datos

            ninja_a_actualizar.nombre = nombre_nuevo
            ninja_a_actualizar.fuerza = fuerza_nueva
            ninja_a_actualizar.agilidad = agilidad_nueva
            ninja_a_actualizar.resistencia = resistencia_nueva
            ninja_a_actualizar.estilo = estilo_nuevo

            print(f"¡Ninja '{ninja_a_actualizar.nombre}' actualizado con éxito! No olvides guardar los cambios.")
        else:
            print("Actualización de ninja cancelada o fallida. ¡A veces, el destino no quiere cambios!")
    else:
        print(f"Ninja '{nombre_buscar}' no encontrado para actualizar.")
    pausar_consola()
def eliminar_ninja():
    limpiar_pantalla()
    print("\n--- ¡Despidiendo a un Ninja! ---")
    if not global_ninjas:
        print("No hay ninjas registrados para enviar de misión final (eliminar).")
        pausar_consola()
        return

    nombre_buscar = input("Ingresa el nombre del ninja que deseas eliminar: ").strip()

    ninja_a_eliminar = None
    for i, ninja in enumerate(global_ninjas):
        if ninja.nombre.lower() == nombre_buscar.lower():
            ninja_a_eliminar = ninja
            break

    if ninja_a_eliminar:
        confirmacion = input(f"¿Estás seguro de que quieres eliminar a '{ninja_a_eliminar.nombre}' para siempre? (s/n): ").strip().lower()
        if confirmacion == 's':
            global_ninjas.remove(ninja_a_eliminar)
            print(f"¡Ninja '{ninja_a_eliminar.nombre}' ha sido eliminado! Recuerda guardar los cambios.")
        else:
            print("Eliminación de ninja cancelada. ¡Un valiente sigue en pie!")
    else:
        print(f"Ninja '{nombre_buscar}' no encontrado para eliminar.")
    pausar_consola()
def _gestionar_habilidades_ninja(ninja):
    """Sub-menú para gestionar las habilidades de un ninja específico."""
    limpiar_pantalla()
    print(f"\n--- GESTIONANDO JUTSUS DE {ninja.nombre.upper()} ---")
    while True:
        print("1. ¡Enseñar una nueva habilidad!")
        print("2. Ver habilidades (por nombre)")
        print("3. Ver habilidades (por poder)")
        print("4. Buscar una habilidad específica")
        print("5. ¡Olvidar una habilidad!")
        print("6. Volver al menú de administrador")

        opcion = input("Elige qué quieres hacer con los jutsus de tu ninja: ").strip()

        if opcion == '1':
            nombre_habilidad = input("Nombre de la nueva habilidad: ").strip()
            if not nombre_habilidad:
                print("¡La habilidad necesita un nombre!")
                pausar_consola()
                continue

            tipo_habilidad_valido = False
            while not tipo_habilidad_valido:
                tipo_habilidad = input("Tipo de habilidad (ofensivo, defensivo, equilibrio, generico): ").strip().lower()
                if tipo_habilidad in ["ofensivo", "defensivo", "equilibrio", "generico"]:
                    tipo_habilidad_valido = True
                else:
                    print("Tipo de habilidad inválido. Elige uno de los que aparecen.")

            valor_habilidad = 0
            while True:
                try:
                    valor_input = input("¿Cuánto poder tiene esta habilidad? (ej. 5, 10, 20): ").strip()
                    valor_habilidad = int(valor_input)
                    break
                except ValueError:
                    print("¡Eso no es un número! Ingresa un valor entero para el poder.")


            if ninja.habilidades.buscar_habilidad(nombre_habilidad):
                print(f"¡{ninja.nombre} ya conoce la habilidad '{nombre_habilidad}'!")
            else:
                ninja.habilidades.insertar_habilidad(nombre_habilidad, tipo_habilidad, valor_habilidad)
                print(f"¡Habilidad '{nombre_habilidad}' (Poder: {valor_habilidad}) agregada a {ninja.nombre}!")
                print("¡No olvides guardar los cambios en ninjas.txt desde el menú principal del administrador!")
            pausar_consola()
def gestionar_habilidades_ninja_principal():
    """Permite al administrador seleccionar un ninja y luego gestionar sus habilidades."""
    limpiar_pantalla()
    print("\n--- ¡Aprende o desaprende jutsus! GESTIONAR HABILIDADES DE NINJA ---")
    if not global_ninjas:
        print("No hay ninjas registrados para gestionar sus habilidades.")
        pausar_consola()
        return

    nombre_buscar = input("Ingresa el nombre del ninja al que le quieres gestionar sus jutsus: ").strip()
    ninja_seleccionado = buscar_ninja_por_nombre(nombre_buscar)

    if ninja_seleccionado:
        _gestionar_habilidades_ninja(ninja_seleccionado)
    else:
        print(f"Ninja '{nombre_buscar}' no encontrado. ¡Quizás está en una misión secreta!")
        pausar_consola()
def _calcular_puntuacion_combate(ninja, habilidad_usada_valor, log_list):
    """
    Calcula la puntuación de un ninja en un turno de combate,
    incluyendo un factor aleatorio y la habilidad usada.
    Si log_list es None, no se añaden detalles del cálculo, útil para combates automáticos.
    """
    puntos = 0

    # Puntuación base por atributos y estilo
    puntos_estilo = 0
    if ninja.estilo == "Taijutsu":
        puntos_estilo = ninja.fuerza * 1.0
    elif ninja.estilo == "Ninjutsu":
        puntos_estilo = ninja.agilidad * 1.0
    elif ninja.estilo == "Genjutsu":
        puntos_estilo = ninja.resistencia * 1.0
    else: # Mixto
        puntos_estilo = (ninja.fuerza + ninja.agilidad + ninja.resistencia) / 3
    puntos += puntos_estilo

    # Habilidad usada en este turno
    puntos += habilidad_usada_valor
    if log_list is not None: # Solo añadir a log si no es un combate de torneo automático
        log_list.append(f"  Puntos base por atributos/estilo: {puntos_estilo:.2f}")
        log_list.append(f"  Poder de habilidad usada: {habilidad_usada_valor}")


    # Factor aleatorio
    random_factor = random.uniform(0.9, 1.1) # Variación del 10%
    puntos_finales = puntos * random_factor
    if log_list is not None:
        log_list.append(f"  Factor Aleatorio Aplicado (x{random_factor:.2f})")
        log_list.append(f"  Puntos de ataque final de {ninja.nombre}: {puntos_finales:.2f}")

    return puntos_finales
def simular_combate_interactivo():
    """Permite al jugador seleccionar su ninja y combatir interactivamente contra otro ninja."""
    limpiar_pantalla()
    print("\n--- ¡A luchar! COMBATE UNO CONTRA UNO ---")
    global ninja_seleccionado_jugador

    if not global_ninjas or len(global_ninjas) < 2:
        print("¡Necesitamos al menos dos ninjas en la aldea para que haya una pelea!")
        pausar_consola()
        return

    if not ninja_seleccionado_jugador:
        print("¡Espera! Primero debes elegir a tu ninja en el menú del jugador (Opción 1: Elegir tu ninja).")
        pausar_consola()
        return

    print(f"\n¡Tu ninja es: **{ninja_seleccionado_jugador.nombre}**!")

    opciones_oponente = [n for n in global_ninjas if n.nombre.lower() != ninja_seleccionado_jugador.nombre.lower()]
    if not opciones_oponente:
        print("¡No hay oponentes disponibles para tu ninja! ¿Todos huyeron?")
        pausar_consola()
        return

    print("\n--- Elige a tu oponente: ---")
    for i, ninja_op in enumerate(opciones_oponente):
        print(f"{i+1}. {ninja_op.nombre} (Fuerza: {ninja_op.fuerza}, Agilidad: {ninja_op.agilidad}, Resistencia: {ninja_op.resistencia})")

    oponente_elegido = None
    while oponente_elegido is None:
        try:
            seleccion = int(input(f"Ingresa el número de tu oponente (1-{len(opciones_oponente)}): ").strip())
            if 1 <= seleccion <= len(opciones_oponente):
                oponente_elegido = opciones_oponente[seleccion - 1]
            else:
                print("¡Opción no válida! Elige un número de la lista.")
        except ValueError:
            print("¡Error! Ingresa un número válido, por favor.")
    # IMPORTANTE: Creamos copias de los ninjas para que la vida actual no afecte sus estados globales
    ninja_jugador_combate = Ninja(
        ninja_seleccionado_jugador.nombre,
        ninja_seleccionado_jugador.fuerza,
        ninja_seleccionado_jugador.agilidad,
        ninja_seleccionado_jugador.resistencia,
        ninja_seleccionado_jugador.estilo
    )
    ninja_jugador_combate.habilidades = ArbolBinarioHabilidades.desde_habilidades_planas(
        ninja_seleccionado_jugador.habilidades.obtener_habilidades_planas()
    )
    ninja_jugador_combate.puntos_victoria = ninja_seleccionado_jugador.puntos_victoria # Mantener PV iniciales

    ninja_oponente_combate = Ninja(
        oponente_elegido.nombre,
        oponente_elegido.fuerza,
        oponente_elegido.agilidad,
        oponente_elegido.resistencia,
        oponente_elegido.estilo
    )
    ninja_oponente_combate.habilidades = ArbolBinarioHabilidades.desde_habilidades_planas(
        oponente_elegido.habilidades.obtener_habilidades_planas()
    )
    ninja_oponente_combate.puntos_victoria = oponente_elegido.puntos_victoria # Mantener PV iniciales


    log_combate_detallado = [f"--- ¡COMIENZA LA BATALLA ÉPICA: {ninja_jugador_combate.nombre} vs {ninja_oponente_combate.nombre}! ---"]

    turno = 1
    ganador_combate = None

    while ninja_jugador_combate.vida_actual > 0 and ninja_oponente_combate.vida_actual > 0:
        limpiar_pantalla()
        print(f"\n--- TURNO {turno} ---")
        print(f"** {ninja_jugador_combate.nombre} (Tú): {ninja_jugador_combate.vida_actual:.1f} HP **")
        print(f"** {ninja_oponente_combate.nombre} (Oponente): {ninja_oponente_combate.vida_actual:.1f} HP **\n")

        # Turno del jugador
        log_combate_detallado.append(f"\n--- TURNO {turno} ---")
        log_combate_detallado.append(f"*** Turno de {ninja_jugador_combate.nombre} (Tu Ninja) ***")
        print(f"¡Es tu turno, {ninja_jugador_combate.nombre}!")

        habilidades_jugador = ninja_jugador_combate.habilidades.obtener_habilidades_por_valor()

        if not habilidades_jugador:
            print(f"Tu ninja, {ninja_jugador_combate.nombre}, no tiene habilidades especiales. ¡Solo puede hacer un Ataque Básico!")
            habilidad_elegida_jugador = ("Ataque Básico", "ofensivo", (ninja_jugador_combate.fuerza + ninja_jugador_combate.agilidad) / 2)
        else:
            print("--- Elige una habilidad para atacar: ---")
            for i, (nombre, tipo, valor) in enumerate(habilidades_jugador):
                print(f"{i+1}. {nombre} (Tipo: {tipo}, Poder: {valor})")

            habilidad_elegida_jugador = None
            while habilidad_elegida_jugador is None:
                try:
                    seleccion = int(input(f"Ingresa el número de tu habilidad (1-{len(habilidades_jugador)}): ").strip())
                    if 1 <= seleccion <= len(habilidades_jugador):
                        habilidad_elegida_jugador = habilidades_jugador[seleccion - 1]
                    else:
                        print("¡Opción no válida! Elige un número de la lista.")
                except ValueError:
                    print("¡Error! Ingresa un número válido.")

        print(f"¡{ninja_jugador_combate.nombre} usa **{habilidad_elegida_jugador[0]}**!")
        log_combate_detallado.append(f"{ninja_jugador_combate.nombre} usa '{habilidad_elegida_jugador[0]}'.")

        ataque_jugador_puntos = _calcular_puntuacion_combate(ninja_jugador_combate, habilidad_elegida_jugador[2], log_combate_detallado)

        # El daño que recibe el oponente es el ataque del jugador menos una parte de la resistencia del oponente
        daño_recibido_oponente = max(0, ataque_jugador_puntos - (ninja_oponente_combate.resistencia * 1.0)) # Resistencia reduce el daño (multiplicador de 1.0)
        ninja_oponente_combate.vida_actual -= daño_recibido_oponente

        print(f"¡{ninja_oponente_combate.nombre} recibe **{daño_recibido_oponente:.1f} de daño**!")
        log_combate_detallado.append(f"{ninja_oponente_combate.nombre} HP antes: {ninja_oponente_combate.vida_actual + daño_recibido_oponente:.1f}, Daño recibido: {daño_recibido_oponente:.1f}")
        log_combate_detallado.append(f"{ninja_oponente_combate.nombre} HP restante: {ninja_oponente_combate.vida_actual:.1f}")

        if ninja_oponente_combate.vida_actual <= 0:
            ganador_combate = ninja_jugador_combate
            log_combate_detallado.append(f"\n¡{ninja_oponente_combate.nombre} ha sido derrotado! ¡Victoria para {ninja_jugador_combate.nombre}!")
            break

        pausar_consola()
        # Si el oponente fue derrotado, no hacemos su turno
        if ninja_oponente_combate.vida_actual <= 0:
            break

        limpiar_pantalla()
        print(f"\n--- TURNO {turno} ---")
        print(f"** {ninja_jugador_combate.nombre} (Tú): {ninja_jugador_combate.vida_actual:.1f} HP **")
        print(f"** {ninja_oponente_combate.nombre} (Oponente): {ninja_oponente_combate.vida_actual:.1f} HP **\n")

        # Turno del oponente (IA)
        log_combate_detallado.append(f"\n*** Turno de {ninja_oponente_combate.nombre} (Oponente) ***")
        print(f"¡Es el turno de {ninja_oponente_combate.nombre}!")

        habilidades_oponente = ninja_oponente_combate.habilidades.obtener_habilidades_por_valor()
        if not habilidades_oponente:
            habilidad_elegida_oponente = ("Ataque Básico", "ofensivo", (ninja_oponente_combate.fuerza + ninja_oponente_combate.agilidad) / 2)
        else:
            # IA simple: elige una habilidad ofensiva si la tiene, si no, la de mayor valor
            habilidad_ofensiva_ia = next(((n,t,v) for n,t,v in habilidades_oponente if t == "ofensivo"), None)
            if habilidad_ofensiva_ia:
                habilidad_elegida_oponente = habilidad_ofensiva_ia
            else:
                habilidad_elegida_oponente = habilidades_oponente[0] # La de mayor valor

        print(f"¡{ninja_oponente_combate.nombre} usa **{habilidad_elegida_oponente[0]}**!")
        log_combate_detallado.append(f"{ninja_oponente_combate.nombre} usa '{habilidad_elegida_oponente[0]}'.")

        ataque_oponente_puntos = _calcular_puntuacion_combate(ninja_oponente_combate, habilidad_elegida_oponente[2], log_combate_detallado)

        daño_recibido_jugador = max(0, ataque_oponente_puntos - (ninja_jugador_combate.resistencia * 1.0)) # Resistencia reduce el daño (multiplicador de 1.0)
        ninja_jugador_combate.vida_actual -= daño_recibido_jugador

        print(f"¡{ninja_jugador_combate.nombre} recibe **{daño_recibido_jugador:.1f} de daño**!")
        log_combate_detallado.append(f"{ninja_jugador_combate.nombre} HP antes: {ninja_jugador_combate.vida_actual + daño_recibido_jugador:.1f}, Daño recibido: {daño_recibido_jugador:.1f}")
        log_combate_detallado.append(f"{ninja_jugador_combate.nombre} HP restante: {ninja_jugador_combate.vida_actual:.1f}")

        if ninja_jugador_combate.vida_actual <= 0:
            ganador_combate = ninja_oponente_combate
            log_combate_detallado.append(f"\n¡{ninja_jugador_combate.nombre} ha sido derrotado por {ninja_oponente_combate.nombre}!")
            break

        turno += 1
        pausar_consola()

    limpiar_pantalla()
    print("\n--- ¡FIN DEL COMBATE! ---")
    if ganador_combate == ninja_jugador_combate:
        print(f"¡FELICIDADES! ¡Tu ninja, **{ninja_jugador_combate.nombre}**, ha ganado la batalla!")
        ninja_seleccionado_jugador.puntos_victoria += 1 # Actualizar PV del ninja real
    else:
        print(f"¡Oh no! Tu ninja, **{ninja_jugador_combate.nombre}**, ha sido derrotado por **{ninja_oponente_combate.nombre}**.")
        # Aquí podrías decidir si el oponente gana PV o no, dependiendo de la lógica del juego.
        # Por ahora, solo el jugador gana PV en el combate 1v1.
        # Oponente real gana PV si lo deseas:
        # oponente_elegido.puntos_victoria += 1


    final_log = "\n".join(log_combate_detallado)
    registrar_combate_global(final_log)

    guardar_ninjas(global_ninjas)
    print("\nLos resultados de esta emocionante batalla se han guardado en el historial global.")
    pausar_consola()
def _simular_combate_automatico(ninja1, ninja2):
    n1_temp = Ninja(ninja1.nombre, ninja1.fuerza, ninja1.agilidad, ninja1.resistencia, ninja1.estilo)
    n1_temp.habilidades = ArbolBinarioHabilidades.desde_habilidades_planas(ninja1.habilidades.obtener_habilidades_planas())
    n2_temp = Ninja(ninja2.nombre, ninja2.fuerza, ninja2.agilidad, ninja2.resistencia, ninja2.estilo)
    n2_temp.habilidades = ArbolBinarioHabilidades.desde_habilidades_planas(ninja2.habilidades.obtener_habilidades_planas())

    log_resumido = []
    log_detallado = []

    log_resumido.append(f"  - {n1_temp.nombre} ({n1_temp.vida_actual:.0f} HP) vs {n2_temp.nombre} ({n2_temp.vida_actual:.0f} HP)")
    log_detallado.append(f"--- COMBATE AUTOMÁTICO DETALLADO: {n1_temp.nombre} vs {n2_temp.nombre} ---")
    log_detallado.append(f"Vida inicial: {n1_temp.nombre}: {n1_temp.vida_actual:.1f} HP | {n2_temp.nombre}: {n2_temp.vida_actual:.1f} HP")

    turno = 1
    ganador = None

    while n1_temp.vida_actual > 0 and n2_temp.vida_actual > 0 and turno < 100:
        log_detallado.append(f"\n--- TURNO {turno} ---")

        # Turno de Ninja 1
        habilidades_n1 = n1_temp.habilidades.obtener_habilidades_por_valor()
        habilidad_n1_elegida = habilidades_n1[0] if habilidades_n1 else ("Ataque Básico", "ofensivo", (n1_temp.fuerza + n1_temp.agilidad) / 2)
        ataque_n1_puntos = _calcular_puntuacion_combate(n1_temp, habilidad_n1_elegida[2], None)
        daño_n2_recibido = max(0, ataque_n1_puntos - (n2_temp.resistencia * 1.0))
        n2_temp.vida_actual -= daño_n2_recibido

        log_detallado.append(f"  {n1_temp.nombre} usa **{habilidad_n1_elegida[0]}** y causa {daño_n2_recibido:.1f} de daño a {n2_temp.nombre}.")
        log_detallado.append(f"  {n2_temp.nombre} HP restante: {n2_temp.vida_actual:.1f}")

        if n2_temp.vida_actual <= 0:
            ganador = ninja1
            break

        # Turno de Ninja 2
        habilidades_n2 = n2_temp.habilidades.obtener_habilidades_por_valor()
        habilidad_n2_elegida = habilidades_n2[0] if habilidades_n2 else ("Ataque Básico", "ofensivo", (n2_temp.fuerza + n2_temp.agilidad) / 2)
        ataque_n2_puntos = _calcular_puntuacion_combate(n2_temp, habilidad_n2_elegida[2], None)
        daño_n1_recibido = max(0, ataque_n2_puntos - (n1_temp.resistencia * 1.0))
        n1_temp.vida_actual -= daño_n1_recibido

        log_detallado.append(f"  {n2_temp.nombre} usa **{habilidad_n2_elegida[0]}** y causa {daño_n1_recibido:.1f} de daño a {n1_temp.nombre}.")
        log_detallado.append(f"  {n1_temp.nombre} HP restante: {n1_temp.vida_actual:.1f}")

        if n1_temp.vida_actual <= 0:
            ganador = ninja2
            break

        turno += 1

    if ganador:
        log_resumido.append(f"    -> GANADOR: {ganador.nombre} (HP final: {n1_temp.vida_actual if ganador.nombre == n1_temp.nombre else n2_temp.vida_actual:.0f})")
        log_detallado.append(f"\n--- FIN DEL COMBATE DETALLADO ---")
        log_detallado.append(f"¡El ganador es: {ganador.nombre}!")
        log_detallado.append(f"HP final de {n1_temp.nombre}: {n1_temp.vida_actual:.1f}")
        log_detallado.append(f"HP final de {n2_temp.nombre}: {n2_temp.vida_actual:.1f}")
    else:

        log_detallado.append("\n--- FIN DEL COMBATE DETALLADO (Límite de Turnos) ---")

        if n1_temp.vida_actual > n2_temp.vida_actual:
            ganador = ninja1
            log_resumido.append(f"    -> GANADOR (por HP restante): {ganador.nombre} (HP final: {n1_temp.vida_actual:.0f})")
            log_detallado.append(f"Combate por límite de turnos. Ganador por HP restante: {ganador.nombre}")
        elif n2_temp.vida_actual > n1_temp.vida_actual:
            ganador = ninja2
            log_resumido.append(f"    -> GANADOR (por HP restante): {ganador.nombre} (HP final: {n2_temp.vida_actual:.0f})")
            log_detallado.append(f"Combate por límite de turnos. Ganador por HP restante: {ganador.nombre}")
        else:
            ganador_aleatorio = random.choice([ninja1, ninja2])
            ganador = ganador_aleatorio
            log_resumido.append(f"    -> GANADOR (por SUERTE): {ganador.nombre} (HP final: {n1_temp.vida_actual if ganador.nombre == n1_temp.nombre else n2_temp.vida_actual:.0f})")
            log_detallado.append(f"¡Empate de HP al límite de turnos! La suerte ha elegido a: {ganador.nombre}")

        log_detallado.append(f"HP final de {n1_temp.nombre}: {n1_temp.vida_actual:.1f}")
        log_detallado.append(f"HP final de {n2_temp.nombre}: {n2_temp.vida_actual:.1f}")
   return ganador, "\n".join(log_resumido), "\n".join(log_detallado)

def simular_torneo_completo():
    """Simula un torneo completo con 16 ninjas (16avos, 8vos, 4tos, semifinal, final)."""
    limpiar_pantalla()
    print("\n--- 🎉⭐¡EL GRAN TORNEO NINJA COMIENZA!⭐🎉 ---")
    print("                        🤜🤛")

    NUM_PARTICIPANTES_TORNEO = 16

    if len(global_ninjas) < NUM_PARTICIPANTES_TORNEO:
        print(f"¡Necesitamos al menos {NUM_PARTICIPANTES_TORNEO} ninjas para un torneo completo!")
        print(f"Actualmente solo hay {len(global_ninjas)} ninjas registrados.")
        print("😡Pide al admin que agregue mas ninjas😡")
        pausar_consola()
        return

    # Seleccionar 16 ninjas al azar para el torneo
    ninjas_torneo = random.sample(global_ninjas, NUM_PARTICIPANTES_TORNEO)
    random.shuffle(ninjas_torneo)

    print(f"\n--- Participantes del Torneo ({NUM_PARTICIPANTES_TORNEO} Ninjas) ---")
    for i, ninja in enumerate(ninjas_torneo):
        print(f"  {i+1}. {ninja.nombre}")
    pausar_consola()

    log_torneo_completo_detallado = []
    log_torneo_completo_detallado.append("--- ⚔️💀INICIO DE TORNEO NINJA COMPLETO💀⚔️ ---")
    log_torneo_completo_detallado.append(f"Participantes: {', '.join([n.nombre for n in ninjas_torneo])}")

    rondas = [
        ("16avos de Final", 0.5),
        ("8vos de Final", 0.75),
        ("4tos de Final", 1.0),
        ("Semifinales", 1.5),
        ("Final", 2.0)
    ]

    participantes_actuales = list(ninjas_torneo)

    for i, (nombre_ronda, pv_por_ronda) in enumerate(rondas):
        if len(participantes_actuales) < 2:
            # Si solo queda un ninja (o ninguno), el torneo termina
            if len(participantes_actuales) == 1:
                campeon = participantes_actuales[0]
                campeon.puntos_victoria += 2.0  # Puntos extra por ser campeón
                limpiar_pantalla()
                print("\n" * 3)
                print("         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *")
                print(f"         *🎉🎉🎉 ¡¡¡EL GRAN CAMPEÓN DEL TORNEO NINJA ES!!! 🎉🎉🎉*")
                print(f"                   * * * {campeon.nombre.upper()} * * *")
                print("         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *")
                print("\n" * 3)
                log_torneo_completo_detallado.append(f"\n¡CAMPEÓN DEL TORNEO: {campeon.nombre}!")
            else:
                limpiar_pantalla()
                print("\n" * 3)
                print("         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *")
                print("                      *😮¡LA FINAL TERMINÓ EN UN ÉPICO EMPATE!🫡 *")
                print("         * 😟LA SUERTE HA DECIDIDO Y NO HUBO UN CAMPEÓN CLARO EN ESTA OCASIÓN.😧 *")
                print("         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *")
                print("\n" * 3)
                log_torneo_completo_detallado.append("\n¡TORNEO TERMINA EN EMPATE!")
            
            # El torneo finaliza aquí
            break

        limpiar_pantalla()
        print(f"\n--- RONDA: {nombre_ronda.upper()} ---")
        print(f"--- ⚔️¡{len(participantes_actuales)} ninjas listos para la batalla!⚔️ ---")
        log_torneo_completo_detallado.append(f"\n--- RONDA: {nombre_ronda.upper()} ---")
        log_torneo_completo_detallado.append(f"Participantes en esta ronda: {', '.join([n.nombre for n in participantes_actuales])}")

        ganadores_ronda = []
        num_combates = len(participantes_actuales) // 2
        random.shuffle(participantes_actuales)

        for j in range(num_combates):
            ninja1 = participantes_actuales[j * 2]
            ninja2 = participantes_actuales[j * 2 + 1]

            ganador, log_resumido_combate, log_detallado_combate = _simular_combate_automatico(ninja1, ninja2)

            print(log_resumido_combate)
            log_torneo_completo_detallado.append(f"\nCombate {j+1} ({nombre_ronda}): {ninja1.nombre} vs {ninja2.nombre}\n" + log_detallado_combate)

            if ganador:
                ganadores_ronda.append(ganador)
                ganador.puntos_victoria += pv_por_ronda

        participantes_actuales = ganadores_ronda
        
        if participantes_actuales:
            print(f"\n--- 🏅¡GANADORES DE LA RONDA DE {nombre_ronda.upper()}!🏅 ---")
            for winner in participantes_actuales:
                print(f"  - {winner.nombre} avanza. (PV actuales: {winner.puntos_victoria:.1f})")
            print("-" * 40)
        else:
            print("\n¡Nadie avanzó en esta ronda!😢 ¡El torneo es una masacre!💀")

        pausar_consola()

    guardar_ninjas(global_ninjas)
    print("\nResultados del torneo mostrados en consola. Los puntos de victoria han sido actualizados.")
    pausar_consola()

def consultar_ranking_ninjas():
    limpiar_pantalla()
    print("\n--- ¡Los ninjas más fuertes! RANKING ---")
    if not global_ninjas:
        print("¡No hay ninjas registrados para ver su poder en el ranking!")
        pausar_consola()
        return

    ninjas_ordenados_por_puntos = sorted(global_ninjas, key=lambda ninja: ninja.puntos_victoria, reverse=True)

    print(f"{'Posición':<9} | {'Nombre del Ninja':<25} | {'Puntos de Victoria':<18}")
    print("-" * 55)
    for i, ninja in enumerate(ninjas_ordenados_por_puntos):
        print(f"{i+1:<9} | {ninja.nombre:<25} | {ninja.puntos_victoria:<18.1f}")
    pausar_consola()
def consultar_historial_global_combates():
    limpiar_pantalla()
    print("\n--- ¡Revive las batallas! HISTORIAL GLOBAL DE COMBATES ---")
    historial = cargar_historial_global_combates()
    if not historial:
        print("¡Todavía no hay combates registrados en el historial global! ¡Sé el primero en luchar!")
        pausar_consola()
        return

    for i, entrada in enumerate(historial):
        print(f"--- COMBATE {i+1} ---")
        print(entrada)
        print("-" * 60)
    pausar_consola()
def seleccionar_ninja_para_jugar():
    limpiar_pantalla()
    print("\n--- 👍¡Elige a tu compañero de batalla!✌️ ---")
    global ninja_seleccionado_jugador

    if not global_ninjas:
        print("😪¡Parece que no hay ninjas en la aldea!😪\n --> El administrador debe crearlos primero.")
        pausar_consola()
        return

    print("--- 🔮Ninjas disponibles para ti:🔮 ---")
    listar_ninjas() 

    nombre_elegido = input("Ingresa el nombre del ninja que quieres controlar en la batalla: ").strip()
    ninja_encontrado = buscar_ninja_por_nombre(nombre_elegido)

    if ninja_encontrado:
        ninja_seleccionado_jugador = ninja_encontrado
        print(f"😃¡Has elegido al grandioso **{ninja_seleccionado_jugador.nombre}** para tus aventuras!🙂‍↕️")
    else:
        print(f"Ninja '{nombre_elegido}' no encontrado. ¡Ese ninja debe estar escondido! Intenta de nuevo.")
    pausar_consola()
def ver_habilidades_ninja_jugador():
    limpiar_pantalla()
    print("\n--- 💀¡Descubre los jutsus de los ninjas!💀 ---")
    if not global_ninjas:
        print("😢¡No hay ninjas registrados para ver sus habilidades!😢\n     ¡Pide al administrador que los cree!     ")
        pausar_consola()
        return

    print("\n--- 🛖Ninjas en la aldea🌲: ---")
    listar_ninjas()

    nombre_buscar = input("🔎Ingresa el nombre del ninja cuyas habilidades deseas espiar: ").strip()
    ninja_seleccionado = buscar_ninja_por_nombre(nombre_buscar)

    if ninja_seleccionado:
        print(f"\n--- Habilidades de **{ninja_seleccionado.nombre.upper()}** ---")

        print("\n¿Cómo quieres ver sus habilidades?")
        print("1. Por nombre (alfabético)")
        print("2. Por poder (de mayor a menor)")

        opcion_listado = input("Elige una opción: ").strip()

        habilidades_a_mostrar = []
        if opcion_listado == '1':
            habilidades_a_mostrar = ninja_seleccionado.habilidades.obtener_habilidades_planas()
            habilidades_a_mostrar = sorted(habilidades_a_mostrar, key=lambda x: x[0].lower())
            print("\n--- HABILIDADES (ORDEN ALFABÉTICO) ---")
        elif opcion_listado == '2':
            habilidades_a_mostrar = ninja_seleccionado.habilidades.obtener_habilidades_por_valor()
            print("\n--- HABILIDADES (ORDEN POR PODER) ---")
        else:
            print("😢¡Opción no válida!😢\n Mostrando por defecto en orden alfabético.")
            habilidades_a_mostrar = ninja_seleccionado.habilidades.obtener_habilidades_planas()
            habilidades_a_mostrar = sorted(habilidades_a_mostrar, key=lambda x: x[0].lower())

        if habilidades_a_mostrar:
            for nombre_h, tipo_h, valor_h in habilidades_a_mostrar:
                print(f"- {nombre_h} (Tipo: {tipo_h}, Poder: {valor_h})")
        else:
            print(f"'{ninja_seleccionado.nombre}' no tiene habilidades registradas. ¡Ea un novato!")
        print("-" * 30)

    else:
        print(f"Ninja '{nombre_buscar}' no encontrado. ¡Asegúrate de escribir bien el nombre!")
    pausar_consola()
# --- MENÚS DE ROL ---

def menu_administrador():
    """Muestra el menú para el rol de Administrador."""
    while True:
        limpiar_pantalla()
        print("\n--- ¡Bienvenido, Administrador de la Aldea Ninja! ---")
        print("1. Reclutar nuevos ninjas")
        print("2. Ver todos los ninjas en la aldea")
        print("3. Inspeccionar los detalles de un ninja")
        print("4. Mejorar los atributos de un ninja")
        print("5. Retirar un ninja de la aldea")
        print("6. Gestionar los jutsus (habilidades) de un ninja")
        print("7. ¡Guardar todos los cambios de ninjas!")
        print("8. Regresar al menú principal")

        opcion = input("Elige tu próxima acción, Gran Administrador: ").strip()

        if opcion == '1':
            agregar_nuevo_ninja()
        elif opcion == '2':
            listar_ninjas()
            pausar_consola()
        elif opcion == '3':
            consultar_ninja()
        elif opcion == '4':
            actualizar_ninja()
        elif opcion == '5':
            eliminar_ninja()
        elif opcion == '6':
            gestionar_habilidades_ninja_principal()
        elif opcion == '7':
            guardar_ninjas(global_ninjas)
            print("¡Todos los cambios en los ninjas han sido guardados!")
            pausar_consola()
        elif opcion == '8':
            print("Saliendo del panel de administrador. ¡Hasta pronto!")
            pausar_consola()
            break
        else:
            print("¡Opción no válida! Elige un número de la lista.")
            pausar_consola()

def menu_jugador():
    """Muestra el menú para el rol de Jugador."""
    global ninja_seleccionado_jugador

    while True:
        limpiar_pantalla()
        print("\n--- 🙂‍↕️¡Bienvenido, Aspirante a Hokage!😃 ---\n   --- MENÚ DE JUGADOR ---   ")
        if ninja_seleccionado_jugador:
            print(f"Tu ninja actual: **{ninja_seleccionado_jugador.nombre}** (Listo para la acción!)")
        else:
            print("No has seleccionado un ninja. ¡Elige uno para empezar a combatir!")

        print("1. ¡Elige a tu ninja para el combate!")
        print("2. Descubre las habilidades de cualquier ninja")
        print("3. ¡Inicia un Combate 1 vs 1 (Interactivo)! **¡Aquí la acción comienza!**")
        print("4. ¡Participa en un Torneo Ninja! (Automático)")
        print("5. Conoce a los ninjas más fuertes: ¡Ranking!")
        print("6. Salir de la aventura y volver al menú principal")

        opcion = input("¿Qué camino ninja quieres tomar?: ").strip()

        if opcion == '1':
            seleccionar_ninja_para_jugar()
        elif opcion == '2':
            ver_habilidades_ninja_jugador()
        elif opcion == '3':
            simular_combate_interactivo()
        elif opcion == '4':
            simular_torneo_completo()
        elif opcion == '5':
            consultar_ranking_ninjas()
        elif opcion == '6':
            print("Volviendo al menú principal. \n 👋¡Hasta la próxima misión!👋")
            ninja_seleccionado_jugador = None
            pausar_consola()
            break
        else:
            print("¡Esa opción no existe en tu mapa ninja! Elige un número válido.")
            pausar_consola()

# --- MENÚ PRINCIPAL DE LA APLICACIÓN ---

def main_menu():
    """Menú principal que maneja el registro y la autenticación."""
    limpiar_pantalla()
    print("¡Bienvenido a ADMINITRADOR!")

    global global_usuarios
    global global_ninjas
    global usuario_actual

    global_usuarios = cargar_usuarios()
    global_ninjas = cargar_ninjas()

    # Crea el usuario administrador por defecto si no existe
    admin_exists = any(u.usuario == "admin@polininjagames.com" for u in global_usuarios)
    if not admin_exists:
        admin_user = Jugador("Admin Poli", "00000000", 99, "admin@polininjagames.com", "admin123", "administrador")
        global_usuarios.append(admin_user)
        guardar_usuarios(global_usuarios)
        print("\n            ¡Atención!              \nSe ha creado un usuario administrador por defecto:")
        print("Usuario: 'admin@polininjagames.com'")
        print("Contraseña: 'admin123'")
        print("¡Con él podrás crear ninjas y gestionar el juego!")
        pausar_consola()

    while True:
        limpiar_pantalla()
        if usuario_actual:
            if usuario_actual.rol == "administrador":
                menu_administrador()
            elif usuario_actual.rol == "jugador":
                menu_jugador()
            usuario_actual = None
            global ninja_seleccionado_jugador
            ninja_seleccionado_jugador = None # Deseleccionar ninja al desloguear usuario
        else:
            print("\n--- ⭐¡Prepárate para la aventura!⭐ ---\n        --- MENÚ PRINCIPAL ---")
            print("1. ¡Únete a la Aldea Ninja! (Registrarse)")
            print("2. ¡Vuelve a la acción! (Iniciar Sesión)")
            print("3. ¡Hora de descansar! (Salir del juego)")

            opcion = input("¿Qué harás ahora, joven ninja?: ").strip()

            if opcion == '1':
                registrar_nuevo_jugador()
            elif opcion == '2':
                usuario_actual = iniciar_sesion()
            elif opcion == '3':
                print("🥹¡Gracias por jugar a PoliNinjaGames!🥹\n Guardando los últimos pergaminos...")
                guardar_usuarios(global_usuarios)
                guardar_ninjas(global_ninjas)
                break
            else:
                print("¡Esa no es una opción válida en el menú! Intenta de nuevo.")
                pausar_consola()

# --- INICIO DE LA APLICACIÓN ---
if __name__ == "__main__":
    main_menu()
